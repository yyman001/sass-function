@charset "utf-8";

@mixin ratio($ratio:2) {
  @media only screen and (-webkit-device-pixel-ratio: $ratio) {
	@content;
  }
}

//清除浮动
@mixin clear() {
  &:after {
	content: '';
	display: table;
	clear: both;
  }
}

//px to rem
$baseFontSize: 100 !default;
@function rem($px:100px){
  @return $px / $baseFontSize * 1rem;
}

//底部1px线
@mixin line1px($style:solid,$color:#D9D9D9){
  &:after {
    content: " ";
    position: absolute;
    left: 0;
    bottom: 0;
    right: 0;
    height: 1px;
    width: 100%;
    border-bottom: 1px $style $color;
    transform-origin: 0 100%;
    transform: scaleY(0.5);
  }
}
//顶部1px线
@mixin line1pxfortop($style:solid, $color:#D9D9D9){
  &:after {
    content: " ";
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    height: 1px;
    width: 100%;
    border-bottom: 1px $style $color;
    transform-origin: 0 100%;
    transform: scaleY(0.5);
  }
}

//圆环1px线
@mixin radius-line($style:solid, $radius:2em) {
  &:after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 200%;
    height: 200%;
    border-radius: $radius;
    //border: 1px solid $color;
    border: 1px $style;
    transform: translate(-50%, -50%) scale(.5);
  }
}

//文字溢出
@mixin text-overflow($line:1){
  display: -webkit-box;
  overflow : hidden;
  text-overflow: ellipsis;
  -webkit-line-clamp: $line;
  -webkit-box-orient: vertical;
}

//垂直居中
@mixin transform-center(){
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

//左右居中
@mixin margin-center(){
  margin-left: auto;
  margin-right: auto;
}


// 选择器范围的混合宏
@mixin select-range($start, $end){ 
  &:nth-child(n+#{$start}):nth-child(-n+#{$end}){ 
    @content; 
  } } 

// 取模查询的混合宏 
@mixin mod-list($mod, $remainder){
   &:nth-last-child(#{$mod}n+#{$remainder}):first-child,
    &:nth-last-child(#{$mod}n+#{$remainder}):first-child ~ li { 
      @content;
     }
  }
  
//px to em
@function px2em($px, $base-font-size: 16px) {
  @if (unitless($px)) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels for you";
    @return px2em($px + 0px);

  } @else if (unit($px) == em) {
    @return $px;
  }
  @return ($px / $base-font-size) * 1em;
}

//px to rem
@mixin px2rem($property,$px-values,$baseline-px:16px,$support-for-ie:false){
  //Conver the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  //Print the first line in pixel values
  @if $support-for-ie {
    #{$property}: $px-values;
  }
  //if there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number"{
    #{$property}: $px-values / $baseline-rem;
  }
  @else {
    //Create an empty list that we can dump values into
    $rem-values:();
    @each $value in $px-values{
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != "number"{
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}